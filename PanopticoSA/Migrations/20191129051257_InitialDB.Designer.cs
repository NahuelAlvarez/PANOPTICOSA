// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PanopticoSA.Models;

namespace PanopticoSA.Migrations
{
    [DbContext(typeof(PanopticoSAContext))]
    [Migration("20191129051257_InitialDB")]
    partial class InitialDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PanopticoSA.Models.Area", b =>
                {
                    b.Property<int>("IdArea")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdJefe");

                    b.Property<string>("Tipo")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdArea");

                    b.HasIndex("IdJefe");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("PanopticoSA.Models.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdPersona");

                    b.HasKey("IdCliente");

                    b.HasIndex("IdPersona");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("PanopticoSA.Models.ClienteContrata", b =>
                {
                    b.Property<int>("IdCliente");

                    b.Property<int>("IdServicio");

                    b.HasKey("IdCliente", "IdServicio");

                    b.HasIndex("IdServicio");

                    b.ToTable("Cliente_Contrata");
                });

            modelBuilder.Entity("PanopticoSA.Models.ClienteOpina", b =>
                {
                    b.Property<int>("IdCliente");

                    b.Property<int>("IdServicio");

                    b.HasKey("IdCliente", "IdServicio");

                    b.HasIndex("IdServicio");

                    b.ToTable("Cliente_Opina");
                });

            modelBuilder.Entity("PanopticoSA.Models.Cuenta", b =>
                {
                    b.Property<int>("IdCuenta")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdCliente");

                    b.Property<string>("Estado")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FechaPago")
                        .HasColumnName("Fecha_Pago");

                    b.Property<DateTime?>("FechaVencimiento")
                        .HasColumnName("Fecha_Vencimiento");

                    b.Property<decimal?>("Monto")
                        .HasColumnType("money");

                    b.HasKey("IdCuenta", "IdCliente")
                        .HasName("PK_Cuenta_1");

                    b.HasIndex("IdCliente");

                    b.ToTable("Cuenta");
                });

            modelBuilder.Entity("PanopticoSA.Models.Domicilio", b =>
                {
                    b.Property<int>("IdDomicilio")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barrio")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Cp")
                        .HasColumnName("CP");

                    b.Property<string>("Departamento")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("IdPersona");

                    b.Property<int>("Numero");

                    b.Property<int?>("Piso");

                    b.Property<string>("Provincia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdDomicilio");

                    b.HasIndex("IdPersona");

                    b.ToTable("Domicilio");
                });

            modelBuilder.Entity("PanopticoSA.Models.Emergencia", b =>
                {
                    b.Property<int>("IdEmergencia")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdCliente");

                    b.Property<int>("IdJefe");

                    b.HasKey("IdEmergencia");

                    b.HasIndex("IdCliente");

                    b.ToTable("Emergencia");
                });

            modelBuilder.Entity("PanopticoSA.Models.Empleado", b =>
                {
                    b.Property<int>("IdEmpleado")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdPersona");

                    b.Property<decimal?>("Sueldo")
                        .HasColumnType("money");

                    b.HasKey("IdEmpleado");

                    b.HasIndex("IdPersona");

                    b.ToTable("Empleado");
                });

            modelBuilder.Entity("PanopticoSA.Models.Factura", b =>
                {
                    b.Property<int>("IdFactura")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("date");

                    b.Property<int>("IdCliente");

                    b.Property<int>("IdCuenta");

                    b.Property<int>("Nro");

                    b.HasKey("IdFactura");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdCuenta", "IdCliente");

                    b.ToTable("Factura");
                });

            modelBuilder.Entity("PanopticoSA.Models.Jefe", b =>
                {
                    b.Property<int>("IdJefe")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdEmpleado");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("IdJefe");

                    b.ToTable("Jefe");
                });

            modelBuilder.Entity("PanopticoSA.Models.Persona", b =>
                {
                    b.Property<int>("IdPersona")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Dni");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnName("Fecha_Nacimiento");

                    b.Property<int>("IdDomicilio");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("IdPersona");

                    b.ToTable("Persona");
                });

            modelBuilder.Entity("PanopticoSA.Models.Presupuesto", b =>
                {
                    b.Property<int>("IdPresupuesto")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdJefe");

                    b.Property<int>("IdServicio");

                    b.HasKey("IdPresupuesto");

                    b.HasIndex("IdJefe");

                    b.HasIndex("IdServicio");

                    b.ToTable("Presupuesto");
                });

            modelBuilder.Entity("PanopticoSA.Models.Servicio", b =>
                {
                    b.Property<int>("IdServicio")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Observaciones")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Tipo")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdServicio");

                    b.ToTable("Servicio");
                });

            modelBuilder.Entity("PanopticoSA.Models.ServicioTecnico", b =>
                {
                    b.Property<int>("IdTurno");

                    b.Property<int>("IdTecnico");

                    b.HasKey("IdTurno", "IdTecnico");

                    b.HasIndex("IdTecnico");

                    b.ToTable("Servicio_Tecnico");
                });

            modelBuilder.Entity("PanopticoSA.Models.Tecnico", b =>
                {
                    b.Property<int>("IdTecnico")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdEmpleado");

                    b.HasKey("IdTecnico");

                    b.HasIndex("IdEmpleado");

                    b.ToTable("Tecnico");
                });

            modelBuilder.Entity("PanopticoSA.Models.Turno", b =>
                {
                    b.Property<int>("IdTurno")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Estado")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("Hora");

                    b.Property<int>("IdCliente");

                    b.Property<int>("IdServicio");

                    b.HasKey("IdTurno");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdServicio");

                    b.ToTable("Turno");
                });

            modelBuilder.Entity("PanopticoSA.Models.Area", b =>
                {
                    b.HasOne("PanopticoSA.Models.Jefe", "IdJefeNavigation")
                        .WithMany("Area")
                        .HasForeignKey("IdJefe")
                        .HasConstraintName("FK_Area_Jefe");
                });

            modelBuilder.Entity("PanopticoSA.Models.Cliente", b =>
                {
                    b.HasOne("PanopticoSA.Models.Persona", "IdPersonaNavigation")
                        .WithMany("Cliente")
                        .HasForeignKey("IdPersona")
                        .HasConstraintName("FK_Cliente_Persona");
                });

            modelBuilder.Entity("PanopticoSA.Models.ClienteContrata", b =>
                {
                    b.HasOne("PanopticoSA.Models.Cliente", "IdClienteNavigation")
                        .WithMany("ClienteContrata")
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("FK_Cliente_Contrata_Cliente");

                    b.HasOne("PanopticoSA.Models.Servicio", "IdServicioNavigation")
                        .WithMany("ClienteContrata")
                        .HasForeignKey("IdServicio")
                        .HasConstraintName("FK_Cliente_Contrata_Servicio");
                });

            modelBuilder.Entity("PanopticoSA.Models.ClienteOpina", b =>
                {
                    b.HasOne("PanopticoSA.Models.Cliente", "IdClienteNavigation")
                        .WithMany("ClienteOpina")
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("FK_Cliente_Opina_Cliente");

                    b.HasOne("PanopticoSA.Models.Servicio", "IdServicioNavigation")
                        .WithMany("ClienteOpina")
                        .HasForeignKey("IdServicio")
                        .HasConstraintName("FK_Cliente_Opina_Servicio");
                });

            modelBuilder.Entity("PanopticoSA.Models.Cuenta", b =>
                {
                    b.HasOne("PanopticoSA.Models.Cliente", "IdClienteNavigation")
                        .WithMany("Cuenta")
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("FK_Cuenta_Cliente");
                });

            modelBuilder.Entity("PanopticoSA.Models.Domicilio", b =>
                {
                    b.HasOne("PanopticoSA.Models.Persona", "IdPersonaNavigation")
                        .WithMany("Domicilio")
                        .HasForeignKey("IdPersona")
                        .HasConstraintName("FK_Domicilio_Persona");
                });

            modelBuilder.Entity("PanopticoSA.Models.Emergencia", b =>
                {
                    b.HasOne("PanopticoSA.Models.Cliente", "IdClienteNavigation")
                        .WithMany("Emergencia")
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("FK_Emergencia_Cliente");
                });

            modelBuilder.Entity("PanopticoSA.Models.Empleado", b =>
                {
                    b.HasOne("PanopticoSA.Models.Persona", "IdPersonaNavigation")
                        .WithMany("Empleado")
                        .HasForeignKey("IdPersona")
                        .HasConstraintName("FK_Empleado_Persona");
                });

            modelBuilder.Entity("PanopticoSA.Models.Factura", b =>
                {
                    b.HasOne("PanopticoSA.Models.Cliente", "IdClienteNavigation")
                        .WithMany("Factura")
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("FK_Factura_Cliente");

                    b.HasOne("PanopticoSA.Models.Cuenta", "IdC")
                        .WithMany("Factura")
                        .HasForeignKey("IdCuenta", "IdCliente")
                        .HasConstraintName("FK_Factura_Cuenta");
                });

            modelBuilder.Entity("PanopticoSA.Models.Presupuesto", b =>
                {
                    b.HasOne("PanopticoSA.Models.Jefe", "IdJefeNavigation")
                        .WithMany("Presupuesto")
                        .HasForeignKey("IdJefe")
                        .HasConstraintName("FK_Presupuesto_Jefe");

                    b.HasOne("PanopticoSA.Models.Servicio", "IdServicioNavigation")
                        .WithMany("Presupuesto")
                        .HasForeignKey("IdServicio")
                        .HasConstraintName("FK_Presupuesto_Servicio");
                });

            modelBuilder.Entity("PanopticoSA.Models.ServicioTecnico", b =>
                {
                    b.HasOne("PanopticoSA.Models.Tecnico", "IdTecnicoNavigation")
                        .WithMany("ServicioTecnico")
                        .HasForeignKey("IdTecnico")
                        .HasConstraintName("FK_Servicio_Tecnico_Tecnico");

                    b.HasOne("PanopticoSA.Models.Servicio", "IdTurnoNavigation")
                        .WithMany("ServicioTecnico")
                        .HasForeignKey("IdTurno")
                        .HasConstraintName("FK_Servicio_Tecnico_Servicio");
                });

            modelBuilder.Entity("PanopticoSA.Models.Tecnico", b =>
                {
                    b.HasOne("PanopticoSA.Models.Empleado", "IdEmpleadoNavigation")
                        .WithMany("Tecnico")
                        .HasForeignKey("IdEmpleado")
                        .HasConstraintName("FK_Tecnico_Empleado");
                });

            modelBuilder.Entity("PanopticoSA.Models.Turno", b =>
                {
                    b.HasOne("PanopticoSA.Models.Cliente", "IdClienteNavigation")
                        .WithMany("Turno")
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("FK_Turno_Cliente");

                    b.HasOne("PanopticoSA.Models.Servicio", "IdServicioNavigation")
                        .WithMany("Turno")
                        .HasForeignKey("IdServicio")
                        .HasConstraintName("FK_Turno_Servicio");
                });
#pragma warning restore 612, 618
        }
    }
}
